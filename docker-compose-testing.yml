services:
  # Test database - ottimizzato per esecuzione veloce dei test
  db-test:
    image: mariadb:11
    container_name: mariadb-test-db
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: ecommerce_test_db
      MYSQL_USER: admin
      MYSQL_PASSWORD: 1234
      # Ottimizzazione per test - disabilita durability per velocit√†
      MYSQL_INNODB_FLUSH_LOG_AT_TRX_COMMIT: 0
      MYSQL_INNODB_FLUSH_METHOD: O_DIRECT
      MYSQL_INNODB_BUFFER_POOL_SIZE: 128M
      # Configurazioni aggiuntive per test
      MYSQL_QUERY_CACHE_SIZE: 32M
      MYSQL_SYNC_BINLOG: 0
    ports:
      - "4006:3306"
    volumes:
      - test_db_data:/var/lib/mysql
      - ./Backend/db.sql:/docker-entrypoint-initdb.d/db.sql
    networks:
      - test_network
    # Utilizzo tmpfs per i log per ridurre I/O
    tmpfs:
      - /tmp
      - /var/log

  # Backend per test - utilizza database di test
  backend-test:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    ports:
      - "4010:4010"
    environment:
      - NODE_ENV=test
      - DB_HOST=db-test
      - DB_PORT=3306
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=ecommerce_test_db
      - JWT_SECRET=test_secret
      - PORT=4010
    volumes:
      - ./Backend:/usr/src/app
      - ./Test/Output:/usr/src/app/Test/Output
      - test-reports:/reports
    depends_on:
      - db-test
    networks:
      - test_network
    command: sh -c "npm install && npm install -g nodemon && npm run dev"

  # Test unitari backend - isolati, senza dipendenze esterne
  test-unitari:
    build:
      context: ./Test/Backend-Unitari
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      DB_HOST: db-test
      DB_PORT: 3306
      DB_USER: admin
      DB_PASSWORD: 1234
      DB_NAME: ecommerce_test_db
    depends_on:
      - db-test
      - backend-test
    networks:
      - test_network
    volumes:
      - ./Test/Output:/usr/src/app/Test/Output
      - test-reports:/reports
    working_dir: /usr/src/app/Test/Backend-Unitari
    command: sh -c "sleep 10 && npm test"
    restart: "no"

  # Test integrativi backend - richiede database di test e backend
  test-integrativi:
    build:
      context: ./Test/Backend-Integrativi
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      DB_HOST: db-test
      DB_PORT: 3306
      DB_USER: admin
      DB_PASSWORD: 1234
      DB_NAME: ecommerce_test_db
    depends_on:
      - db-test
      - backend-test
    networks:
      - test_network
    volumes:
      - ./Test/Output:/usr/src/app/Test/Output
      - test-reports:/reports
    working_dir: /usr/src/app/Test/Backend-Integrativi
    command: sh -c "sleep 10 && npm test"
    restart: "no"

  # Test frontend - testing DOM con jsdom
  test-frontend:
    build:
      context: ./Test/Frontend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      REACT_APP_API_URL: http://backend-test:4010
    networks:
      - test_network
    volumes:
      - ./Test/Output:/usr/src/app/Test/Output
      - test-reports:/reports
    working_dir: /usr/src/app/Test/Frontend
    command: sh -c "sleep 10 && npm test"
    restart: "no"

  # Test performance - load testing e benchmark
  test-performance:
    build:
      context: .
      dockerfile: Test/Performance/Dockerfile
    environment:
      - API_BASE_URL=http://backend-test:4010
      - DB_HOST=db-test
      - DB_PORT=3306
      - DB_USER=admin
      - DB_PASSWORD=admin
      - DB_NAME=ecommerce_test_db
    volumes:
      - ./Test/Output:/usr/src/app/Test/Output
      - test-reports:/reports
    depends_on:
      - backend-test
      - db-test
    networks:
      - test_network
    command: sh -c "sleep 10 && npm test"

volumes:
  test_db_data:   # Persistenza dati test (limitata alla sessione)
  test-reports:   # Volume condiviso per i report

networks:
  test_network:
    driver: bridge