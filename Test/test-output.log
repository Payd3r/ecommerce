===== REPORT TEST FRONTEND =====

Test completati in circa 3.50s
Test suite: 7 passate, 0 fallite, 7 totali
Test: 43 passati, 0 falliti, 43 totali

DETTAGLI TEST SUITE:
-------------------

PASS tests\app.test.js
  âœ“ App > dovrebbe inizializzare il router e i componenti quando viene caricato il DOM (0.01s)
  âœ“ App > dovrebbe controllare lo stato di autenticazione e aggiornare il profilo (0.00s)
  âœ“ App > dovrebbe gestire errori di autenticazione (0.03s)
  âœ“ App > dovrebbe registrare il listener per auth:change (0.00s)

PASS tests\router.test.js
  âœ“ Router > navigate > dovrebbe navigare correttamente a una rotta pubblica (0.02s)
  âœ“ Router > navigate > dovrebbe navigare correttamente a una rotta dinamica (0.01s)
  âœ“ Router > navigate > dovrebbe reindirizzare al login se l'utente non Ã¨ autenticato per una rotta protetta (0.00s)
  âœ“ Router > navigate > dovrebbe permettere l'accesso a una rotta protetta se l'utente Ã¨ autenticato (0.00s)
  âœ“ Router > navigate > dovrebbe reindirizzare alla home se l'utente non ha il ruolo richiesto (0.00s)
  âœ“ Router > navigate > dovrebbe gestire errori durante la navigazione (0.00s)
  âœ“ Router > navigate > dovrebbe navigare alla rotta 404 se la rotta non esiste (0.00s)
  âœ“ Router > navigateToDashboard > dovrebbe reindirizzare alla dashboard admin per un utente admin (0.00s)
  âœ“ Router > navigateToDashboard > dovrebbe reindirizzare alla dashboard artigiano per un utente artigiano (0.00s)
  âœ“ Router > navigateToDashboard > dovrebbe reindirizzare alla home per un utente client (0.00s)
  âœ“ Router > navigateToDashboard > dovrebbe reindirizzare alla home se l'utente non Ã¨ loggato (0.00s)

PASS tests\integration.test.js
  âœ“ Integrazione Frontend > flusso completo: login, navigazione, visualizzazione prodotti e checkout (0.02s)
  âœ“ Integrazione Frontend > flusso per utente artigiano: login, accesso dashboard e gestione prodotti (0.00s)

PASS tests\authService.test.js
  âœ“ AuthService > login > dovrebbe effettuare il login con successo e salvare i dati di autenticazione (0.02s)
  âœ“ AuthService > login > dovrebbe gestire errori durante il login (0.02s)
  âœ“ AuthService > logout > dovrebbe eliminare i dati di autenticazione dal localStorage (0.00s)
  âœ“ AuthService > getProfile > dovrebbe recuperare il profilo utente e aggiornare i dati nel localStorage (0.00s)
  âœ“ AuthService > getProfile > dovrebbe lanciare un errore se l'utente non Ã¨ autenticato (0.00s)
  âœ“ AuthService > isAuthenticated > dovrebbe restituire true se Ã¨ presente un token (0.00s)
  âœ“ AuthService > isAuthenticated > dovrebbe restituire false se non Ã¨ presente un token (0.00s)
  âœ“ AuthService > hasRole > dovrebbe restituire true se l'utente ha il ruolo specificato (0.00s)
  âœ“ AuthService > hasRole > dovrebbe restituire true se l'utente ha uno dei ruoli specificati nell'array (0.00s)
  âœ“ AuthService > hasRole > dovrebbe restituire false se l'utente non ha il ruolo specificato (0.00s)
  âœ“ AuthService > hasRole > dovrebbe restituire false se non c'Ã¨ un utente loggato (0.00s)

PASS tests\example.test.js
  âœ“ Test Frontend di Base > dovrebbe passare un test di esempio (0.01s)
  âœ“ Test Frontend di Base > dovrebbe concatenare stringhe (0.00s)
  âœ“ Test Frontend di Base > dovrebbe eseguire semplici operazioni matematiche (0.00s)
  âœ“ Test Frontend di Base > dovrebbe manipolare array (0.00s)
  âœ“ Test Frontend di Base > dovrebbe manipolare oggetti (0.01s)

PASS tests\fetchWithAuth.test.js
  âœ“ fetchWithAuth > dovrebbe chiamare fetch con i parametri corretti (0.02s)
  âœ“ fetchWithAuth > dovrebbe gestire correttamente una risposta con status 401 (0.04s)
  âœ“ fetchWithAuth > dovrebbe restituire la risposta per status code diversi da 401 (0.01s)
  âœ“ fetchWithAuth > dovrebbe gestire correttamente errori di rete (0.01s)

PASS tests\api.test.js
  âœ“ ApiService > login > dovrebbe effettuare il login con successo (0.02s)
  âœ“ ApiService > login > dovrebbe gestire errori durante il login (0.03s)
  âœ“ ApiService > getProfile > dovrebbe recuperare il profilo utente (0.01s)
  âœ“ ApiService > getProfile > dovrebbe gestire errori durante il recupero del profilo (0.01s)
  âœ“ ApiService > getAddress > dovrebbe recuperare l'indirizzo dell'utente (0.00s)
  âœ“ ApiService > saveAddress > dovrebbe salvare l'indirizzo dell'utente (0.00s)

TUTTI I TEST SONO PASSATI! ðŸŽ‰
