{
  "testType": "backend-integrativi",
  "timestamp": "2025-06-03T20:24:04.954Z",
  "summary": {
    "numTotalTests": 89,
    "numPassedTests": 66,
    "numFailedTests": 23,
    "numPendingTests": 0,
    "numSkippedTests": 0,
    "success": false,
    "duration": 5158
  },
  "testResults": [
    {
      "name": "orders.integration.test.js",
      "status": "failed",
      "message": "  ● Orders Integration Tests › PUT /orders/:orderId › dovrebbe restituire item di un ordine specifico\n\n    AxiosError: Request failed with status code 400\n\n      372 |     it('dovrebbe restituire item di un ordine specifico', async () => {\n      373 |       if (testOrder && testOrder.id) {\n    > 374 |         const response = await axios.put(`${API_BASE_URL}/orders/${testOrder.id}`, {}, {\n          |                          ^\n      375 |           headers: {\n      376 |             'Authorization': `Bearer ${authTokens.client}`\n      377 |           }\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/orders.integration.test.js:374:26)\n\n  ● Orders Integration Tests › POST /orders/create-payment-intent › dovrebbe creare payment intent per checkout\n\n    expect(received).toBeDefined()\n\n    Received: undefined\n\n      475 |       expect(response.status).toBe(200);\n      476 |       expect(response.data.clientSecret).toBeDefined();\n    > 477 |       expect(response.data.amount).toBeDefined();\n          |                                    ^\n      478 |     });\n      479 |\n      480 |     it('dovrebbe rifiutare payment intent senza autenticazione', async () => {\n\n      at Object.toBeDefined (tests/orders.integration.test.js:477:36)\n",
      "duration": 2595,
      "numFailingTests": 2,
      "numPassingTests": 24,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe creare un nuovo ordine",
          "status": "passed",
          "failureMessages": [],
          "duration": 42
        },
        {
          "title": "dovrebbe rifiutare creazione ordine con dati mancanti",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe usare status default \"pending\" se non specificato",
          "status": "passed",
          "failureMessages": [],
          "duration": 30
        },
        {
          "title": "dovrebbe creare ordine dal carrello con checkout",
          "status": "passed",
          "failureMessages": [],
          "duration": 98
        },
        {
          "title": "dovrebbe rifiutare checkout senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 23
        },
        {
          "title": "dovrebbe rifiutare checkout con carrello vuoto",
          "status": "passed",
          "failureMessages": [],
          "duration": 40
        },
        {
          "title": "dovrebbe restituire tutti gli ordini per admin",
          "status": "passed",
          "failureMessages": [],
          "duration": 14
        },
        {
          "title": "dovrebbe restituire ordini specifici del cliente",
          "status": "passed",
          "failureMessages": [],
          "duration": 37
        },
        {
          "title": "dovrebbe rifiutare accesso a ordini di altri clienti",
          "status": "passed",
          "failureMessages": [],
          "duration": 104
        },
        {
          "title": "dovrebbe rifiutare accesso senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 8
        },
        {
          "title": "dovrebbe restituire ordini per prodotti di un artigiano",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare ID artigiano non valido",
          "status": "passed",
          "failureMessages": [],
          "duration": 6
        },
        {
          "title": "dovrebbe restituire array vuoto per artigiano senza ordini",
          "status": "passed",
          "failureMessages": [],
          "duration": 8
        },
        {
          "title": "dovrebbe restituire statistiche vendite mensili per artigiano",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare richiesta senza artisanId",
          "status": "passed",
          "failureMessages": [],
          "duration": 7
        },
        {
          "title": "dovrebbe rifiutare artisanId non valido",
          "status": "passed",
          "failureMessages": [],
          "duration": 6
        },
        {
          "title": "dovrebbe restituire statistiche ordini mensili per artigiano",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare richiesta senza artisanId",
          "status": "passed",
          "failureMessages": [],
          "duration": 7
        },
        {
          "title": "dovrebbe restituire item di un ordine specifico",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 400\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/orders.integration.test.js:374:26)"
          ],
          "duration": 11
        },
        {
          "title": "dovrebbe rifiutare accesso senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 7
        },
        {
          "title": "dovrebbe eliminare ordine come admin",
          "status": "passed",
          "failureMessages": [],
          "duration": 40
        },
        {
          "title": "dovrebbe rifiutare eliminazione senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 8
        },
        {
          "title": "dovrebbe rifiutare eliminazione ordine inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe creare payment intent per checkout",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBeDefined()\n\nReceived: undefined\n    at Object.toBeDefined (/usr/src/app/Test/Backend-Integrativi/tests/orders.integration.test.js:477:36)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 531
        },
        {
          "title": "dovrebbe rifiutare payment intent senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 24
        },
        {
          "title": "dovrebbe rifiutare payment intent con carrello vuoto",
          "status": "passed",
          "failureMessages": [],
          "duration": 34
        }
      ]
    },
    {
      "name": "cart.integration.test.js",
      "status": "failed",
      "message": "  ● Cart Integration Tests › POST /cart › dovrebbe creare un nuovo carrello\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 201\n    Received: 200\n\n      52 |       });\n      53 |\n    > 54 |       expect(response.status).toBe(201);\n         |                               ^\n      55 |       expect(response.data.message).toContain('Carrello creato');\n      56 |       expect(response.data.cart_id).toBeDefined();\n      57 |     });\n\n      at Object.toBe (tests/cart.integration.test.js:54:31)\n\n  ● Cart Integration Tests › DELETE /cart › dovrebbe gestire svuotamento carrello già vuoto\n\n    expect(received).toContain(expected) // indexOf\n\n    Expected substring: \"già vuoto\"\n    Received string:    \"Carrello svuotato\"\n\n      380 |\n      381 |       expect(response.status).toBe(200);\n    > 382 |       expect(response.data.message).toContain('già vuoto');\n          |                                     ^\n      383 |     });\n      384 |\n      385 |     it('dovrebbe rifiutare svuotamento senza autenticazione', async () => {\n\n      at Object.toContain (tests/cart.integration.test.js:382:37)\n",
      "duration": 853,
      "numFailingTests": 2,
      "numPassingTests": 19,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe creare un nuovo carrello",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 201\nReceived: 200\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/cart.integration.test.js:54:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 34
        },
        {
          "title": "dovrebbe riconoscere carrello già esistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 24
        },
        {
          "title": "dovrebbe rifiutare creazione carrello senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 12
        },
        {
          "title": "dovrebbe aggiungere prodotto al carrello",
          "status": "passed",
          "failureMessages": [],
          "duration": 48
        },
        {
          "title": "dovrebbe aggiornare quantità prodotto già presente",
          "status": "passed",
          "failureMessages": [],
          "duration": 43
        },
        {
          "title": "dovrebbe rifiutare aggiunta senza dati validi",
          "status": "passed",
          "failureMessages": [],
          "duration": 14
        },
        {
          "title": "dovrebbe rifiutare quantità non valida",
          "status": "passed",
          "failureMessages": [],
          "duration": 12
        },
        {
          "title": "dovrebbe rifiutare aggiunta senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 8
        },
        {
          "title": "dovrebbe restituire carrello con prodotti",
          "status": "passed",
          "failureMessages": [],
          "duration": 15
        },
        {
          "title": "dovrebbe restituire carrello vuoto per nuovo utente",
          "status": "passed",
          "failureMessages": [],
          "duration": 98
        },
        {
          "title": "dovrebbe rifiutare accesso carrello senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe aggiornare quantità prodotto nel carrello",
          "status": "passed",
          "failureMessages": [],
          "duration": 47
        },
        {
          "title": "dovrebbe rifiutare aggiornamento con quantità non valida",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare aggiornamento item inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare aggiornamento senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 8
        },
        {
          "title": "dovrebbe rimuovere prodotto dal carrello",
          "status": "passed",
          "failureMessages": [],
          "duration": 49
        },
        {
          "title": "dovrebbe rifiutare rimozione item inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 13
        },
        {
          "title": "dovrebbe rifiutare rimozione senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 7
        },
        {
          "title": "dovrebbe svuotare il carrello",
          "status": "passed",
          "failureMessages": [],
          "duration": 20
        },
        {
          "title": "dovrebbe gestire svuotamento carrello già vuoto",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toContain(expected) // indexOf\n\nExpected substring: \"già vuoto\"\nReceived string:    \"Carrello svuotato\"\n    at Object.toContain (/usr/src/app/Test/Backend-Integrativi/tests/cart.integration.test.js:382:37)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 12
        },
        {
          "title": "dovrebbe rifiutare svuotamento senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 7
        }
      ]
    },
    {
      "name": "products.integration.test.js",
      "status": "failed",
      "message": "  ● Products Integration Tests › POST /products › dovrebbe creare un nuovo prodotto come artigiano\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 25.99\n    Received: \"25.99\"\n\n      70 |       expect(response.status).toBe(201);\n      71 |       expect(response.data.name).toBe(productData.name);\n    > 72 |       expect(response.data.price).toBe(productData.price);\n         |                                   ^\n      73 |       expect(response.data.artisan_id).toBeDefined();\n      74 |       \n      75 |       testProduct = response.data;\n\n      at Object.toBe (tests/products.integration.test.js:72:35)\n\n  ● Products Integration Tests › GET /products › dovrebbe filtrare prodotti per categoria\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 104\n    Received: 103\n\n      160 |       if (response.data.products.length > 0) {\n      161 |         response.data.products.forEach(product => {\n    > 162 |           expect(product.category_id).toBe(testCategory.id);\n          |                                       ^\n      163 |         });\n      164 |       }\n      165 |     });\n\n      at toBe (tests/products.integration.test.js:162:39)\n          at Array.forEach (<anonymous>)\n      at Object.forEach (tests/products.integration.test.js:161:32)\n\n  ● Products Integration Tests › GET /products/:id › dovrebbe restituire prodotto specifico con immagini\n\n    TypeError: Cannot read properties of undefined (reading 'id')\n\n      224 |   describe('GET /products/:id', () => {\n      225 |     it('dovrebbe restituire prodotto specifico con immagini', async () => {\n    > 226 |       const response = await axios.get(`${API_BASE_URL}/products/${testProduct.id}`);\n          |                                                                                ^\n      227 |       \n      228 |       expect(response.status).toBe(200);\n      229 |       expect(response.data.id).toBe(testProduct.id);\n\n      at Object.id (tests/products.integration.test.js:226:80)\n\n  ● Products Integration Tests › PUT /products/:id › dovrebbe aggiornare prodotto del proprio artigiano\n\n    TypeError: Cannot read properties of undefined (reading 'id')\n\n      254 |       };\n      255 |\n    > 256 |       const response = await axios.put(`${API_BASE_URL}/products/${testProduct.id}`, updateData, {\n          |                                                                                ^\n      257 |         headers: {\n      258 |           'Authorization': `Bearer ${authTokens.artisan}`\n      259 |         }\n\n      at Object.id (tests/products.integration.test.js:256:80)\n\n  ● Products Integration Tests › PUT /products/:id › dovrebbe rifiutare aggiornamento senza autenticazione\n\n    TypeError: Cannot read properties of undefined (reading 'status')\n\n      273 |         fail('Dovrebbe lanciare errore senza autenticazione');\n      274 |       } catch (error) {\n    > 275 |         expect(error.response.status).toBe(401);\n          |                               ^\n      276 |       }\n      277 |     });\n      278 |\n\n      at Object.status (tests/products.integration.test.js:275:31)\n\n  ● Products Integration Tests › PUT /products/:id › dovrebbe rifiutare aggiornamento prodotto 404\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 404\n    Received: 400\n\n      288 |         fail('Dovrebbe lanciare errore per prodotto inesistente');\n      289 |       } catch (error) {\n    > 290 |         expect(error.response.status).toBe(404);\n          |                                       ^\n      291 |       }\n      292 |     });\n      293 |   });\n\n      at Object.toBe (tests/products.integration.test.js:290:39)\n\n  ● Products Integration Tests › DELETE /products/:id › dovrebbe eliminare prodotto del proprio artigiano\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 200\n    Received: 204\n\n      314 |       });\n      315 |\n    > 316 |       expect(response.status).toBe(200);\n          |                               ^\n      317 |       expect(response.data.message).toContain('eliminato');\n      318 |\n      319 |       // Verifica che il prodotto sia stato eliminato\n\n      at Object.toBe (tests/products.integration.test.js:316:31)\n\n  ● Products Integration Tests › DELETE /products/:id › dovrebbe rifiutare eliminazione senza autenticazione\n\n    TypeError: Cannot read properties of undefined (reading 'status')\n\n      331 |         fail('Dovrebbe lanciare errore senza autenticazione');\n      332 |       } catch (error) {\n    > 333 |         expect(error.response.status).toBe(401);\n          |                               ^\n      334 |       }\n      335 |     });\n      336 |\n\n      at Object.status (tests/products.integration.test.js:333:31)\n",
      "duration": 696,
      "numFailingTests": 8,
      "numPassingTests": 10,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe creare un nuovo prodotto come artigiano",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 25.99\nReceived: \"25.99\"\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:72:35)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 34
        },
        {
          "title": "dovrebbe rifiutare creazione prodotto senza autenticazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 13
        },
        {
          "title": "dovrebbe rifiutare creazione prodotto da cliente",
          "status": "passed",
          "failureMessages": [],
          "duration": 106
        },
        {
          "title": "dovrebbe rifiutare creazione prodotto con dati mancanti",
          "status": "passed",
          "failureMessages": [],
          "duration": 18
        },
        {
          "title": "dovrebbe restituire lista prodotti con paginazione",
          "status": "passed",
          "failureMessages": [],
          "duration": 11
        },
        {
          "title": "dovrebbe filtrare prodotti per categoria",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 104\nReceived: 103\n    at toBe (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:162:39)\n    at Array.forEach (<anonymous>)\n    at Object.forEach (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:161:32)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 16
        },
        {
          "title": "dovrebbe filtrare prodotti per prezzo",
          "status": "passed",
          "failureMessages": [],
          "duration": 13
        },
        {
          "title": "dovrebbe cercare prodotti per nome",
          "status": "passed",
          "failureMessages": [],
          "duration": 15
        },
        {
          "title": "dovrebbe restituire prodotti con informazioni complete",
          "status": "passed",
          "failureMessages": [],
          "duration": 11
        },
        {
          "title": "dovrebbe restituire prodotti più venduti",
          "status": "passed",
          "failureMessages": [],
          "duration": 12
        },
        {
          "title": "dovrebbe restituire prodotto specifico con immagini",
          "status": "failed",
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'id')\n    at Object.id (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:226:80)\n    at Promise.then.completed (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at run (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:444:34)"
          ],
          "duration": 1
        },
        {
          "title": "dovrebbe restituire 404 per prodotto inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 11
        },
        {
          "title": "dovrebbe aggiornare prodotto del proprio artigiano",
          "status": "failed",
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'id')\n    at Object.id (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:256:80)\n    at Promise.then.completed (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at run (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:444:34)"
          ],
          "duration": 1
        },
        {
          "title": "dovrebbe rifiutare aggiornamento senza autenticazione",
          "status": "failed",
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'status')\n    at Object.status (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:275:31)\n    at Promise.then.completed (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at run (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:444:34)"
          ],
          "duration": 0
        },
        {
          "title": "dovrebbe rifiutare aggiornamento prodotto 404",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 404\nReceived: 400\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:290:39)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 8
        },
        {
          "title": "dovrebbe eliminare prodotto del proprio artigiano",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 200\nReceived: 204\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:316:31)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 30
        },
        {
          "title": "dovrebbe rifiutare eliminazione senza autenticazione",
          "status": "failed",
          "failureMessages": [
            "TypeError: Cannot read properties of undefined (reading 'status')\n    at Object.status (/usr/src/app/Test/Backend-Integrativi/tests/products.integration.test.js:333:31)\n    at Promise.then.completed (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at _runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:121:9)\n    at run (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/usr/src/app/Test/Backend-Integrativi/node_modules/jest-runner/build/runTest.js:444:34)"
          ],
          "duration": 1
        },
        {
          "title": "dovrebbe rifiutare eliminazione prodotto inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        }
      ]
    },
    {
      "name": "auth.integration.test.js",
      "status": "failed",
      "message": "  ● Auth Integration Tests › POST /auth/register › dovrebbe registrare un nuovo cliente\n\n    AxiosError: Request failed with status code 400\n\n      34 |   describe('POST /auth/register', () => {\n      35 |     it('dovrebbe registrare un nuovo cliente', async () => {\n    > 36 |       const response = await axios.post(`${API_BASE_URL}/auth/register`, testUsers.client);\n         |                        ^\n      37 |       \n      38 |       expect(response.status).toBe(201);\n      39 |       expect(response.data.success).toBe(true);\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:36:24)\n\n  ● Auth Integration Tests › POST /auth/register › dovrebbe registrare un nuovo artigiano\n\n    AxiosError: Request failed with status code 400\n\n      46 |\n      47 |     it('dovrebbe registrare un nuovo artigiano', async () => {\n    > 48 |       const response = await axios.post(`${API_BASE_URL}/auth/register`, testUsers.artisan);\n         |                        ^\n      49 |       \n      50 |       expect(response.status).toBe(201);\n      51 |       expect(response.data.success).toBe(true);\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:48:24)\n\n  ● Auth Integration Tests › POST /auth/register › dovrebbe registrare un nuovo admin\n\n    AxiosError: Request failed with status code 400\n\n      56 |\n      57 |     it('dovrebbe registrare un nuovo admin', async () => {\n    > 58 |       const response = await axios.post(`${API_BASE_URL}/auth/register`, testUsers.admin);\n         |                        ^\n      59 |       \n      60 |       expect(response.status).toBe(201);\n      61 |       expect(response.data.success).toBe(true);\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:58:24)\n\n  ● Auth Integration Tests › GET /auth/profile › dovrebbe restituire profilo utente con token valido\n\n    AxiosError: Request failed with status code 401\n\n      153 |   describe('GET /auth/profile', () => {\n      154 |     it('dovrebbe restituire profilo utente con token valido', async () => {\n    > 155 |       const response = await axios.get(`${API_BASE_URL}/auth/profile`, {\n          |                        ^\n      156 |         headers: {\n      157 |           'Authorization': `Bearer ${authTokens.client}`\n      158 |         }\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:155:24)\n\n  ● Auth Integration Tests › GET /auth/profile › dovrebbe restituire profilo artigiano con dati extended_users\n\n    AxiosError: Request failed with status code 401\n\n      167 |\n      168 |     it('dovrebbe restituire profilo artigiano con dati extended_users', async () => {\n    > 169 |       const response = await axios.get(`${API_BASE_URL}/auth/profile`, {\n          |                        ^\n      170 |         headers: {\n      171 |           'Authorization': `Bearer ${authTokens.artisan}`\n      172 |         }\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:169:24)\n\n  ● Auth Integration Tests › PUT /auth/profile › dovrebbe aggiornare nickname utente\n\n    AxiosError: Request failed with status code 401\n\n      204 |     it('dovrebbe aggiornare nickname utente', async () => {\n      205 |       const newNickname = 'Updated Test Client';\n    > 206 |       const response = await axios.put(`${API_BASE_URL}/auth/profile`, {\n          |                        ^\n      207 |         nickname: newNickname\n      208 |       }, {\n      209 |         headers: {\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:206:24)\n\n  ● Auth Integration Tests › PUT /auth/profile › dovrebbe aggiornare email utente\n\n    AxiosError: Request failed with status code 401\n\n      219 |     it('dovrebbe aggiornare email utente', async () => {\n      220 |       const newEmail = 'updated.client@integration.test';\n    > 221 |       const response = await axios.put(`${API_BASE_URL}/auth/profile`, {\n          |                        ^\n      222 |         email: newEmail\n      223 |       }, {\n      224 |         headers: {\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:221:24)\n\n  ● Auth Integration Tests › PUT /auth/profile › dovrebbe rifiutare aggiornamento senza dati\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 401\n\n      244 |         fail('Dovrebbe lanciare errore senza dati');\n      245 |       } catch (error) {\n    > 246 |         expect(error.response.status).toBe(400);\n          |                                       ^\n      247 |       }\n      248 |     });\n      249 |\n\n      at Object.toBe (tests/auth.integration.test.js:246:39)\n\n  ● Auth Integration Tests › PUT /auth/artisan/bio › dovrebbe aggiornare bio artigiano\n\n    AxiosError: Request failed with status code 401\n\n      263 |     it('dovrebbe aggiornare bio artigiano', async () => {\n      264 |       const bio = 'Questa è la mia bio di test per l\\'artigiano';\n    > 265 |       const response = await axios.put(`${API_BASE_URL}/auth/artisan/bio`, {\n          |                        ^\n      266 |         bio: bio\n      267 |       }, {\n      268 |         headers: {\n\n      at settle (node_modules/axios/lib/core/settle.js:19:12)\n      at IncomingMessage.handleStreamEnd (node_modules/axios/lib/adapters/http.js:599:11)\n      at Axios.request (node_modules/axios/lib/core/Axios.js:45:41)\n      at Object.<anonymous> (tests/auth.integration.test.js:265:24)\n\n  ● Auth Integration Tests › PUT /auth/artisan/bio › dovrebbe rifiutare aggiornamento bio da non-artigiano\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 500\n    Received: 401\n\n      286 |         fail('Dovrebbe lanciare errore per non-artigiano');\n      287 |       } catch (error) {\n    > 288 |         expect(error.response.status).toBe(500);\n          |                                       ^\n      289 |       }\n      290 |     });\n      291 |\n\n      at Object.toBe (tests/auth.integration.test.js:288:39)\n\n  ● Auth Integration Tests › PUT /auth/artisan/bio › dovrebbe rifiutare aggiornamento bio senza bio\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected: 400\n    Received: 401\n\n      299 |         fail('Dovrebbe lanciare errore senza bio');\n      300 |       } catch (error) {\n    > 301 |         expect(error.response.status).toBe(400);\n          |                                       ^\n      302 |       }\n      303 |     });\n      304 |   });\n\n      at Object.toBe (tests/auth.integration.test.js:301:39)\n",
      "duration": 663,
      "numFailingTests": 11,
      "numPassingTests": 10,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe registrare un nuovo cliente",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 400\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:36:24)"
          ],
          "duration": 115
        },
        {
          "title": "dovrebbe registrare un nuovo artigiano",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 400\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:48:24)"
          ],
          "duration": 22
        },
        {
          "title": "dovrebbe registrare un nuovo admin",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 400\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:58:24)"
          ],
          "duration": 16
        },
        {
          "title": "dovrebbe rifiutare registrazione con email duplicata",
          "status": "passed",
          "failureMessages": [],
          "duration": 21
        },
        {
          "title": "dovrebbe rifiutare registrazione con dati mancanti",
          "status": "passed",
          "failureMessages": [],
          "duration": 14
        },
        {
          "title": "dovrebbe rifiutare ruolo non valido",
          "status": "passed",
          "failureMessages": [],
          "duration": 12
        },
        {
          "title": "dovrebbe effettuare login con credenziali valide",
          "status": "passed",
          "failureMessages": [],
          "duration": 92
        },
        {
          "title": "dovrebbe rifiutare login con password errata",
          "status": "passed",
          "failureMessages": [],
          "duration": 84
        },
        {
          "title": "dovrebbe rifiutare login con email inesistente",
          "status": "passed",
          "failureMessages": [],
          "duration": 20
        },
        {
          "title": "dovrebbe rifiutare login con dati mancanti",
          "status": "passed",
          "failureMessages": [],
          "duration": 13
        },
        {
          "title": "dovrebbe restituire profilo utente con token valido",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 401\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:155:24)"
          ],
          "duration": 10
        },
        {
          "title": "dovrebbe restituire profilo artigiano con dati extended_users",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 401\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:169:24)"
          ],
          "duration": 8
        },
        {
          "title": "dovrebbe rifiutare accesso senza token",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare accesso con token non valido",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe aggiornare nickname utente",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 401\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:206:24)"
          ],
          "duration": 11
        },
        {
          "title": "dovrebbe aggiornare email utente",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 401\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:221:24)"
          ],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare aggiornamento senza dati",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 401\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:246:39)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 10
        },
        {
          "title": "dovrebbe rifiutare aggiornamento senza token",
          "status": "passed",
          "failureMessages": [],
          "duration": 9
        },
        {
          "title": "dovrebbe aggiornare bio artigiano",
          "status": "failed",
          "failureMessages": [
            "AxiosError: Request failed with status code 401\n    at settle (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/adapters/http.js:599:11)\n    at IncomingMessage.emit (node:events:536:35)\n    at endReadableNT (node:internal/streams/readable:1698:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/usr/src/app/Test/Backend-Integrativi/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at Object.<anonymous> (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:265:24)"
          ],
          "duration": 10
        },
        {
          "title": "dovrebbe rifiutare aggiornamento bio da non-artigiano",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 500\nReceived: 401\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:288:39)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 9
        },
        {
          "title": "dovrebbe rifiutare aggiornamento bio senza bio",
          "status": "failed",
          "failureMessages": [
            "Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: 400\nReceived: 401\n    at Object.toBe (/usr/src/app/Test/Backend-Integrativi/tests/auth.integration.test.js:301:39)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)"
          ],
          "duration": 11
        }
      ]
    },
    {
      "name": "connection.test.js",
      "status": "passed",
      "message": "",
      "duration": 135,
      "numFailingTests": 0,
      "numPassingTests": 1,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe connettersi al backend",
          "status": "passed",
          "failureMessages": [],
          "duration": 18
        }
      ]
    },
    {
      "name": "base.test.js",
      "status": "passed",
      "message": "",
      "duration": 109,
      "numFailingTests": 0,
      "numPassingTests": 2,
      "numPendingTests": 0,
      "assertionResults": [
        {
          "title": "dovrebbe verificare che la configurazione di test funzioni correttamente",
          "status": "passed",
          "failureMessages": [],
          "duration": 2
        },
        {
          "title": "dovrebbe supportare richieste HTTP",
          "status": "passed",
          "failureMessages": [],
          "duration": 21
        }
      ]
    }
  ]
}